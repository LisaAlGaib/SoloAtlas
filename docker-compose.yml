version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: soloatlas-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-soloatlas}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - soloatlas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Meilisearch for full-text search
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: soloatlas-meilisearch
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-masterKey}
      MEILI_ENV: ${MEILI_ENV:-development}
    ports:
      - "${MEILI_PORT:-7700}:7700"
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - soloatlas-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: soloatlas-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - soloatlas-network
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}

  # API Service (Node.js/Express)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: ${NODE_ENV:-development}
    container_name: soloatlas-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-soloatlas}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-password}@redis:6379
      MEILI_HOST: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-masterKey}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./packages:/packages
    networks:
      - soloatlas-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      meilisearch:
        condition: service_started
    develop:
      watch:
        - action: sync
          path: ./apps/api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./apps/api/package.json

  # Web Service (Next.js)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: ${NODE_ENV:-development}
    container_name: soloatlas-web
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${WEB_PORT:-3000}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-soloatlas}
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
      - ./packages:/packages
    networks:
      - soloatlas-network
    depends_on:
      - api
    develop:
      watch:
        - action: sync
          path: ./apps/web
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: ./apps/web/package.json

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: soloatlas-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - soloatlas-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: soloatlas-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "${GRAFANA_PORT:-3030}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - soloatlas-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  meilisearch_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  soloatlas-network:
    driver: bridge
